<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="341.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="341.00"> </text><svg id="frames" x="10" width="1180" total_samples="2459"><g><title>raytracer`DYLD-STUB$$pow (1 samples, 0.04%)</title><rect x="0.1220%" y="229" width="0.0407%" height="15" fill="rgb(227,0,7)" fg:x="3" fg:w="1"/><text x="0.3720%" y="239.50"></text></g><g><title>raytracer`raytracer::ray_color (9 samples, 0.37%)</title><rect x="0.1627%" y="229" width="0.3660%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="9"/><text x="0.4127%" y="239.50"></text></g><g><title>libsystem_m.dylib`pow (5 samples, 0.20%)</title><rect x="2.2367%" y="213" width="0.2033%" height="15" fill="rgb(221,193,54)" fg:x="55" fg:w="5"/><text x="2.4867%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.20%)</title><rect x="2.4400%" y="213" width="0.2033%" height="15" fill="rgb(248,212,6)" fg:x="60" fg:w="5"/><text x="2.6900%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.12%)</title><rect x="2.6434%" y="213" width="0.1220%" height="15" fill="rgb(208,68,35)" fg:x="65" fg:w="3"/><text x="2.8934%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (7 samples, 0.28%)</title><rect x="2.7654%" y="213" width="0.2847%" height="15" fill="rgb(232,128,0)" fg:x="68" fg:w="7"/><text x="3.0154%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (10 samples, 0.41%)</title><rect x="3.0500%" y="213" width="0.4067%" height="15" fill="rgb(207,160,47)" fg:x="75" fg:w="10"/><text x="3.3000%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.08%)</title><rect x="3.4567%" y="213" width="0.0813%" height="15" fill="rgb(228,23,34)" fg:x="85" fg:w="2"/><text x="3.7067%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.04%)</title><rect x="3.5380%" y="213" width="0.0407%" height="15" fill="rgb(218,30,26)" fg:x="87" fg:w="1"/><text x="3.7880%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.08%)</title><rect x="3.5787%" y="213" width="0.0813%" height="15" fill="rgb(220,122,19)" fg:x="88" fg:w="2"/><text x="3.8287%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.20%)</title><rect x="3.6600%" y="213" width="0.2033%" height="15" fill="rgb(250,228,42)" fg:x="90" fg:w="5"/><text x="3.9100%" y="223.50"></text></g><g><title>raytracer`&lt;raytracer::bhv::BHVNode as raytracer::elements::Hittable&gt;::hit (5 samples, 0.20%)</title><rect x="3.8634%" y="213" width="0.2033%" height="15" fill="rgb(240,193,28)" fg:x="95" fg:w="5"/><text x="4.1134%" y="223.50"></text></g><g><title>raytracer`&lt;raytracer::elements::Quad as raytracer::elements::Hittable&gt;::random (5 samples, 0.20%)</title><rect x="4.0667%" y="213" width="0.2033%" height="15" fill="rgb(216,20,37)" fg:x="100" fg:w="5"/><text x="4.3167%" y="223.50"></text></g><g><title>raytracer`&lt;raytracer::pdf::PDF as raytracer::pdf::PDFTrait&gt;::generate (10 samples, 0.41%)</title><rect x="4.2700%" y="213" width="0.4067%" height="15" fill="rgb(206,188,39)" fg:x="105" fg:w="10"/><text x="4.5200%" y="223.50"></text></g><g><title>raytracer`&lt;raytracer::pdf::PDF as raytracer::pdf::PDFTrait&gt;::value (7 samples, 0.28%)</title><rect x="4.6767%" y="213" width="0.2847%" height="15" fill="rgb(217,207,13)" fg:x="115" fg:w="7"/><text x="4.9267%" y="223.50"></text></g><g><title>raytracer`DYLD-STUB$$free (4 samples, 0.16%)</title><rect x="4.9614%" y="213" width="0.1627%" height="15" fill="rgb(231,73,38)" fg:x="122" fg:w="4"/><text x="5.2114%" y="223.50"></text></g><g><title>raytracer`DYLD-STUB$$malloc (4 samples, 0.16%)</title><rect x="5.1240%" y="213" width="0.1627%" height="15" fill="rgb(225,20,46)" fg:x="126" fg:w="4"/><text x="5.3740%" y="223.50"></text></g><g><title>raytracer`DYLD-STUB$$memmove (2 samples, 0.08%)</title><rect x="5.2867%" y="213" width="0.0813%" height="15" fill="rgb(210,31,41)" fg:x="130" fg:w="2"/><text x="5.5367%" y="223.50"></text></g><g><title>raytracer`core::fmt::write (1 samples, 0.04%)</title><rect x="5.3680%" y="197" width="0.0407%" height="15" fill="rgb(221,200,47)" fg:x="132" fg:w="1"/><text x="5.6180%" y="207.50"></text></g><g><title>raytracer`core::fmt::num::imp::_&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.04%)</title><rect x="5.3680%" y="181" width="0.0407%" height="15" fill="rgb(226,26,5)" fg:x="132" fg:w="1"/><text x="5.6180%" y="191.50"></text></g><g><title>raytracer`indicatif::draw_target::ProgressDrawTarget::drawable (2 samples, 0.08%)</title><rect x="5.4087%" y="197" width="0.0813%" height="15" fill="rgb(249,33,26)" fg:x="133" fg:w="2"/><text x="5.6587%" y="207.50"></text></g><g><title>raytracer`indicatif::draw_target::RateLimiter::allow (2 samples, 0.08%)</title><rect x="5.4087%" y="181" width="0.0813%" height="15" fill="rgb(235,183,28)" fg:x="133" fg:w="2"/><text x="5.6587%" y="191.50"></text></g><g><title>raytracer`indicatif::state::BarState::draw (4 samples, 0.16%)</title><rect x="5.3680%" y="213" width="0.1627%" height="15" fill="rgb(221,5,38)" fg:x="132" fg:w="4"/><text x="5.6180%" y="223.50"></text></g><g><title>raytracer`indicatif::style::ProgressStyle::push_line (1 samples, 0.04%)</title><rect x="5.4900%" y="197" width="0.0407%" height="15" fill="rgb(247,18,42)" fg:x="135" fg:w="1"/><text x="5.7400%" y="207.50"></text></g><g><title>raytracer`alloc::fmt::format::format_inner (1 samples, 0.04%)</title><rect x="5.4900%" y="181" width="0.0407%" height="15" fill="rgb(241,131,45)" fg:x="135" fg:w="1"/><text x="5.7400%" y="191.50"></text></g><g><title>raytracer`core::fmt::write (1 samples, 0.04%)</title><rect x="5.4900%" y="165" width="0.0407%" height="15" fill="rgb(249,31,29)" fg:x="135" fg:w="1"/><text x="5.7400%" y="175.50"></text></g><g><title>raytracer`&lt;indicatif::style::BarDisplay as core::fmt::Display&gt;::fmt (1 samples, 0.04%)</title><rect x="5.4900%" y="149" width="0.0407%" height="15" fill="rgb(225,111,53)" fg:x="135" fg:w="1"/><text x="5.7400%" y="159.50"></text></g><g><title>raytracer`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.04%)</title><rect x="5.4900%" y="133" width="0.0407%" height="15" fill="rgb(238,160,17)" fg:x="135" fg:w="1"/><text x="5.7400%" y="143.50"></text></g><g><title>raytracer`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.04%)</title><rect x="5.4900%" y="117" width="0.0407%" height="15" fill="rgb(214,148,48)" fg:x="135" fg:w="1"/><text x="5.7400%" y="127.50"></text></g><g><title>raytracer`alloc::raw_vec::finish_grow (1 samples, 0.04%)</title><rect x="5.4900%" y="101" width="0.0407%" height="15" fill="rgb(232,36,49)" fg:x="135" fg:w="1"/><text x="5.7400%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.04%)</title><rect x="5.4900%" y="85" width="0.0407%" height="15" fill="rgb(209,103,24)" fg:x="135" fg:w="1"/><text x="5.7400%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.04%)</title><rect x="5.4900%" y="69" width="0.0407%" height="15" fill="rgb(229,88,8)" fg:x="135" fg:w="1"/><text x="5.7400%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.04%)</title><rect x="5.4900%" y="53" width="0.0407%" height="15" fill="rgb(213,181,19)" fg:x="135" fg:w="1"/><text x="5.7400%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (3 samples, 0.12%)</title><rect x="7.3200%" y="197" width="0.1220%" height="15" fill="rgb(254,191,54)" fg:x="180" fg:w="3"/><text x="7.5700%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.04%)</title><rect x="7.4420%" y="197" width="0.0407%" height="15" fill="rgb(241,83,37)" fg:x="183" fg:w="1"/><text x="7.6920%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.16%)</title><rect x="7.4827%" y="197" width="0.1627%" height="15" fill="rgb(233,36,39)" fg:x="184" fg:w="4"/><text x="7.7327%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (9 samples, 0.37%)</title><rect x="7.6454%" y="197" width="0.3660%" height="15" fill="rgb(226,3,54)" fg:x="188" fg:w="9"/><text x="7.8954%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.12%)</title><rect x="8.0114%" y="197" width="0.1220%" height="15" fill="rgb(245,192,40)" fg:x="197" fg:w="3"/><text x="8.2614%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (2 samples, 0.08%)</title><rect x="9.0281%" y="181" width="0.0813%" height="15" fill="rgb(238,167,29)" fg:x="222" fg:w="2"/><text x="9.2781%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (5 samples, 0.20%)</title><rect x="10.4107%" y="165" width="0.2033%" height="15" fill="rgb(232,182,51)" fg:x="256" fg:w="5"/><text x="10.6607%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (62 samples, 2.52%)</title><rect x="8.1334%" y="197" width="2.5214%" height="15" fill="rgb(231,60,39)" fg:x="200" fg:w="62"/><text x="8.3834%" y="207.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (38 samples, 1.55%)</title><rect x="9.1094%" y="181" width="1.5453%" height="15" fill="rgb(208,69,12)" fg:x="224" fg:w="38"/><text x="9.3594%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.04%)</title><rect x="10.6141%" y="165" width="0.0407%" height="15" fill="rgb(235,93,37)" fg:x="261" fg:w="1"/><text x="10.8641%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.08%)</title><rect x="10.6547%" y="197" width="0.0813%" height="15" fill="rgb(213,116,39)" fg:x="262" fg:w="2"/><text x="10.9047%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (2 samples, 0.08%)</title><rect x="10.9801%" y="181" width="0.0813%" height="15" fill="rgb(222,207,29)" fg:x="270" fg:w="2"/><text x="11.2301%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.08%)</title><rect x="11.0614%" y="181" width="0.0813%" height="15" fill="rgb(206,96,30)" fg:x="272" fg:w="2"/><text x="11.3114%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.04%)</title><rect x="11.5494%" y="165" width="0.0407%" height="15" fill="rgb(218,138,4)" fg:x="284" fg:w="1"/><text x="11.7994%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (3 samples, 0.12%)</title><rect x="11.5901%" y="165" width="0.1220%" height="15" fill="rgb(250,191,14)" fg:x="285" fg:w="3"/><text x="11.8401%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (66 samples, 2.68%)</title><rect x="10.7361%" y="197" width="2.6840%" height="15" fill="rgb(239,60,40)" fg:x="264" fg:w="66"/><text x="10.9861%" y="207.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (56 samples, 2.28%)</title><rect x="11.1427%" y="181" width="2.2773%" height="15" fill="rgb(206,27,48)" fg:x="274" fg:w="56"/><text x="11.3927%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (42 samples, 1.71%)</title><rect x="11.7121%" y="165" width="1.7080%" height="15" fill="rgb(225,35,8)" fg:x="288" fg:w="42"/><text x="11.9621%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (8 samples, 0.33%)</title><rect x="13.0948%" y="149" width="0.3253%" height="15" fill="rgb(250,213,24)" fg:x="322" fg:w="8"/><text x="13.3448%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.04%)</title><rect x="13.4201%" y="197" width="0.0407%" height="15" fill="rgb(247,123,22)" fg:x="330" fg:w="1"/><text x="13.6701%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.08%)</title><rect x="13.4608%" y="197" width="0.0813%" height="15" fill="rgb(231,138,38)" fg:x="331" fg:w="2"/><text x="13.7108%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (7 samples, 0.28%)</title><rect x="13.5421%" y="197" width="0.2847%" height="15" fill="rgb(231,145,46)" fg:x="333" fg:w="7"/><text x="13.7921%" y="207.50"></text></g><g><title>raytracer`&lt;raytracer::bhv::BHVNode as raytracer::elements::Hittable&gt;::hit (25 samples, 1.02%)</title><rect x="29.4022%" y="117" width="1.0167%" height="15" fill="rgb(251,118,11)" fg:x="723" fg:w="25"/><text x="29.6522%" y="127.50"></text></g><g><title>raytracer`&lt;raytracer::bhv::BHVNode as raytracer::elements::Hittable&gt;::hit (182 samples, 7.40%)</title><rect x="24.2782%" y="133" width="7.4014%" height="15" fill="rgb(217,147,25)" fg:x="597" fg:w="182"/><text x="24.5282%" y="143.50">raytracer`..</text></g><g><title>raytracer`&lt;raytracer::elements::Element as raytracer::elements::Hittable&gt;::hit (31 samples, 1.26%)</title><rect x="30.4189%" y="117" width="1.2607%" height="15" fill="rgb(247,81,37)" fg:x="748" fg:w="31"/><text x="30.6689%" y="127.50"></text></g><g><title>raytracer`&lt;raytracer::elements::Element as raytracer::elements::Hittable&gt;::hit (97 samples, 3.94%)</title><rect x="31.6795%" y="133" width="3.9447%" height="15" fill="rgb(209,12,38)" fg:x="779" fg:w="97"/><text x="31.9295%" y="143.50">rayt..</text></g><g><title>raytracer`&lt;raytracer::bhv::BHVNode as raytracer::elements::Hittable&gt;::hit (539 samples, 21.92%)</title><rect x="13.8268%" y="197" width="21.9195%" height="15" fill="rgb(227,1,9)" fg:x="340" fg:w="539"/><text x="14.0768%" y="207.50">raytracer`&lt;raytracer::bhv::BHVNode ..</text></g><g><title>raytracer`&lt;raytracer::bhv::BHVNode as raytracer::elements::Hittable&gt;::hit (516 samples, 20.98%)</title><rect x="14.7621%" y="181" width="20.9841%" height="15" fill="rgb(248,47,43)" fg:x="363" fg:w="516"/><text x="15.0121%" y="191.50">raytracer`&lt;raytracer::bhv::BHVNod..</text></g><g><title>raytracer`&lt;raytracer::bhv::BHVNode as raytracer::elements::Hittable&gt;::hit (488 samples, 19.85%)</title><rect x="15.9008%" y="165" width="19.8455%" height="15" fill="rgb(221,10,30)" fg:x="391" fg:w="488"/><text x="16.1508%" y="175.50">raytracer`&lt;raytracer::bhv::BHVN..</text></g><g><title>raytracer`&lt;raytracer::bhv::BHVNode as raytracer::elements::Hittable&gt;::hit (414 samples, 16.84%)</title><rect x="18.9101%" y="149" width="16.8361%" height="15" fill="rgb(210,229,1)" fg:x="465" fg:w="414"/><text x="19.1601%" y="159.50">raytracer`&lt;raytracer::bhv:..</text></g><g><title>raytracer`&lt;raytracer::elements::Quad as raytracer::elements::Hittable&gt;::hit (3 samples, 0.12%)</title><rect x="35.6242%" y="133" width="0.1220%" height="15" fill="rgb(222,148,37)" fg:x="876" fg:w="3"/><text x="35.8742%" y="143.50"></text></g><g><title>raytracer`&lt;raytracer::elements::Element as raytracer::elements::Hittable&gt;::pdf_value (7 samples, 0.28%)</title><rect x="35.7462%" y="197" width="0.2847%" height="15" fill="rgb(234,67,33)" fg:x="879" fg:w="7"/><text x="35.9962%" y="207.50"></text></g><g><title>raytracer`&lt;raytracer::elements::Quad as raytracer::elements::Hittable&gt;::random (1 samples, 0.04%)</title><rect x="36.0309%" y="197" width="0.0407%" height="15" fill="rgb(247,98,35)" fg:x="886" fg:w="1"/><text x="36.2809%" y="207.50"></text></g><g><title>libsystem_m.dylib`0x000000019325dc64 (1 samples, 0.04%)</title><rect x="37.7796%" y="181" width="0.0407%" height="15" fill="rgb(247,138,52)" fg:x="929" fg:w="1"/><text x="38.0296%" y="191.50"></text></g><g><title>libsystem_m.dylib`0x000000019325dc64 (1 samples, 0.04%)</title><rect x="38.0643%" y="165" width="0.0407%" height="15" fill="rgb(213,79,30)" fg:x="936" fg:w="1"/><text x="38.3143%" y="175.50"></text></g><g><title>raytracer`&lt;raytracer::pdf::PDF as raytracer::pdf::PDFTrait&gt;::generate (52 samples, 2.11%)</title><rect x="36.0716%" y="197" width="2.1147%" height="15" fill="rgb(246,177,23)" fg:x="887" fg:w="52"/><text x="36.3216%" y="207.50">r..</text></g><g><title>libsystem_m.dylib`__sincos_stret (9 samples, 0.37%)</title><rect x="37.8203%" y="181" width="0.3660%" height="15" fill="rgb(230,62,27)" fg:x="930" fg:w="9"/><text x="38.0703%" y="191.50"></text></g><g><title>libsystem_m.dylib`0x000000019325dd7c (2 samples, 0.08%)</title><rect x="38.1049%" y="165" width="0.0813%" height="15" fill="rgb(216,154,8)" fg:x="937" fg:w="2"/><text x="38.3549%" y="175.50"></text></g><g><title>raytracer`&lt;raytracer::elements::Element as raytracer::elements::Hittable&gt;::pdf_value (2 samples, 0.08%)</title><rect x="38.5929%" y="181" width="0.0813%" height="15" fill="rgb(244,35,45)" fg:x="949" fg:w="2"/><text x="38.8429%" y="191.50"></text></g><g><title>raytracer`&lt;raytracer::elements::Quad as raytracer::elements::Hittable&gt;::hit (68 samples, 2.77%)</title><rect x="38.6743%" y="181" width="2.7654%" height="15" fill="rgb(251,115,12)" fg:x="951" fg:w="68"/><text x="38.9243%" y="191.50">ra..</text></g><g><title>raytracer`&lt;raytracer::pdf::PDF as raytracer::pdf::PDFTrait&gt;::value (87 samples, 3.54%)</title><rect x="38.1863%" y="197" width="3.5380%" height="15" fill="rgb(240,54,50)" fg:x="939" fg:w="87"/><text x="38.4363%" y="207.50">ray..</text></g><g><title>raytracer`&lt;raytracer::pdf::PDF as raytracer::pdf::PDFTrait&gt;::value (7 samples, 0.28%)</title><rect x="41.4396%" y="181" width="0.2847%" height="15" fill="rgb(233,84,52)" fg:x="1019" fg:w="7"/><text x="41.6896%" y="191.50"></text></g><g><title>raytracer`DYLD-STUB$$__sincos_stret (1 samples, 0.04%)</title><rect x="41.7243%" y="197" width="0.0407%" height="15" fill="rgb(207,117,47)" fg:x="1026" fg:w="1"/><text x="41.9743%" y="207.50"></text></g><g><title>raytracer`DYLD-STUB$$malloc (1 samples, 0.04%)</title><rect x="41.7649%" y="197" width="0.0407%" height="15" fill="rgb(249,43,39)" fg:x="1027" fg:w="1"/><text x="42.0149%" y="207.50"></text></g><g><title>raytracer`DYLD-STUB$$memmove (1 samples, 0.04%)</title><rect x="41.8056%" y="197" width="0.0407%" height="15" fill="rgb(209,38,44)" fg:x="1028" fg:w="1"/><text x="42.0556%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (4 samples, 0.16%)</title><rect x="42.6596%" y="181" width="0.1627%" height="15" fill="rgb(236,212,23)" fg:x="1049" fg:w="4"/><text x="42.9096%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.08%)</title><rect x="42.8223%" y="181" width="0.0813%" height="15" fill="rgb(242,79,21)" fg:x="1053" fg:w="2"/><text x="43.0723%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (4 samples, 0.16%)</title><rect x="43.1476%" y="165" width="0.1627%" height="15" fill="rgb(211,96,35)" fg:x="1061" fg:w="4"/><text x="43.3976%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (29 samples, 1.18%)</title><rect x="42.9036%" y="181" width="1.1793%" height="15" fill="rgb(253,215,40)" fg:x="1055" fg:w="29"/><text x="43.1536%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (19 samples, 0.77%)</title><rect x="43.3103%" y="165" width="0.7727%" height="15" fill="rgb(211,81,21)" fg:x="1065" fg:w="19"/><text x="43.5603%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (5 samples, 0.20%)</title><rect x="43.8796%" y="149" width="0.2033%" height="15" fill="rgb(208,190,38)" fg:x="1079" fg:w="5"/><text x="44.1296%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.04%)</title><rect x="44.0830%" y="181" width="0.0407%" height="15" fill="rgb(235,213,38)" fg:x="1084" fg:w="1"/><text x="44.3330%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (1 samples, 0.04%)</title><rect x="44.1236%" y="165" width="0.0407%" height="15" fill="rgb(237,122,38)" fg:x="1085" fg:w="1"/><text x="44.3736%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (4 samples, 0.16%)</title><rect x="44.1643%" y="165" width="0.1627%" height="15" fill="rgb(244,218,35)" fg:x="1086" fg:w="4"/><text x="44.4143%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (7 samples, 0.28%)</title><rect x="44.4490%" y="149" width="0.2847%" height="15" fill="rgb(240,68,47)" fg:x="1093" fg:w="7"/><text x="44.6990%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (33 samples, 1.34%)</title><rect x="44.1236%" y="181" width="1.3420%" height="15" fill="rgb(210,16,53)" fg:x="1085" fg:w="33"/><text x="44.3736%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (28 samples, 1.14%)</title><rect x="44.3270%" y="165" width="1.1387%" height="15" fill="rgb(235,124,12)" fg:x="1090" fg:w="28"/><text x="44.5770%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (18 samples, 0.73%)</title><rect x="44.7336%" y="149" width="0.7320%" height="15" fill="rgb(224,169,11)" fg:x="1100" fg:w="18"/><text x="44.9836%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (2 samples, 0.08%)</title><rect x="45.3843%" y="133" width="0.0813%" height="15" fill="rgb(250,166,2)" fg:x="1116" fg:w="2"/><text x="45.6343%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.04%)</title><rect x="45.4656%" y="181" width="0.0407%" height="15" fill="rgb(242,216,29)" fg:x="1118" fg:w="1"/><text x="45.7156%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.12%)</title><rect x="45.5063%" y="181" width="0.1220%" height="15" fill="rgb(230,116,27)" fg:x="1119" fg:w="3"/><text x="45.7563%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.12%)</title><rect x="45.6283%" y="181" width="0.1220%" height="15" fill="rgb(228,99,48)" fg:x="1122" fg:w="3"/><text x="45.8783%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.12%)</title><rect x="45.7503%" y="181" width="0.1220%" height="15" fill="rgb(253,11,6)" fg:x="1125" fg:w="3"/><text x="46.0003%" y="191.50"></text></g><g><title>raytracer`&lt;raytracer::bhv::BHVNode as raytracer::elements::Hittable&gt;::hit (19 samples, 0.77%)</title><rect x="60.8784%" y="101" width="0.7727%" height="15" fill="rgb(247,143,39)" fg:x="1497" fg:w="19"/><text x="61.1284%" y="111.50"></text></g><g><title>raytracer`&lt;raytracer::bhv::BHVNode as raytracer::elements::Hittable&gt;::hit (184 samples, 7.48%)</title><rect x="55.4290%" y="117" width="7.4827%" height="15" fill="rgb(236,97,10)" fg:x="1363" fg:w="184"/><text x="55.6790%" y="127.50">raytracer`..</text></g><g><title>raytracer`&lt;raytracer::elements::Element as raytracer::elements::Hittable&gt;::hit (31 samples, 1.26%)</title><rect x="61.6511%" y="101" width="1.2607%" height="15" fill="rgb(233,208,19)" fg:x="1516" fg:w="31"/><text x="61.9011%" y="111.50"></text></g><g><title>raytracer`&lt;raytracer::elements::Element as raytracer::elements::Hittable&gt;::hit (155 samples, 6.30%)</title><rect x="62.9118%" y="117" width="6.3034%" height="15" fill="rgb(216,164,2)" fg:x="1547" fg:w="155"/><text x="63.1618%" y="127.50">raytrace..</text></g><g><title>raytracer`&lt;raytracer::bhv::BHVNode as raytracer::elements::Hittable&gt;::hit (590 samples, 23.99%)</title><rect x="45.8723%" y="181" width="23.9935%" height="15" fill="rgb(220,129,5)" fg:x="1128" fg:w="590"/><text x="46.1223%" y="191.50">raytracer`&lt;raytracer::bhv::BHVNode as ..</text></g><g><title>raytracer`&lt;raytracer::bhv::BHVNode as raytracer::elements::Hittable&gt;::hit (552 samples, 22.45%)</title><rect x="47.4176%" y="165" width="22.4481%" height="15" fill="rgb(242,17,10)" fg:x="1166" fg:w="552"/><text x="47.6676%" y="175.50">raytracer`&lt;raytracer::bhv::BHVNode a..</text></g><g><title>raytracer`&lt;raytracer::bhv::BHVNode as raytracer::elements::Hittable&gt;::hit (502 samples, 20.41%)</title><rect x="49.4510%" y="149" width="20.4148%" height="15" fill="rgb(242,107,0)" fg:x="1216" fg:w="502"/><text x="49.7010%" y="159.50">raytracer`&lt;raytracer::bhv::BHVNo..</text></g><g><title>raytracer`&lt;raytracer::bhv::BHVNode as raytracer::elements::Hittable&gt;::hit (438 samples, 17.81%)</title><rect x="52.0537%" y="133" width="17.8121%" height="15" fill="rgb(251,28,31)" fg:x="1280" fg:w="438"/><text x="52.3037%" y="143.50">raytracer`&lt;raytracer::bhv::B..</text></g><g><title>raytracer`&lt;raytracer::elements::Quad as raytracer::elements::Hittable&gt;::hit (16 samples, 0.65%)</title><rect x="69.2151%" y="117" width="0.6507%" height="15" fill="rgb(233,223,10)" fg:x="1702" fg:w="16"/><text x="69.4651%" y="127.50"></text></g><g><title>raytracer`&lt;raytracer::elements::Quad as raytracer::elements::Hittable&gt;::random (1 samples, 0.04%)</title><rect x="69.8658%" y="181" width="0.0407%" height="15" fill="rgb(215,21,27)" fg:x="1718" fg:w="1"/><text x="70.1158%" y="191.50"></text></g><g><title>libsystem_m.dylib`0x000000019325dc64 (1 samples, 0.04%)</title><rect x="70.6791%" y="165" width="0.0407%" height="15" fill="rgb(232,23,21)" fg:x="1738" fg:w="1"/><text x="70.9291%" y="175.50"></text></g><g><title>raytracer`&lt;raytracer::pdf::PDF as raytracer::pdf::PDFTrait&gt;::generate (23 samples, 0.94%)</title><rect x="69.9065%" y="181" width="0.9353%" height="15" fill="rgb(244,5,23)" fg:x="1719" fg:w="23"/><text x="70.1565%" y="191.50"></text></g><g><title>libsystem_m.dylib`__sincos_stret (3 samples, 0.12%)</title><rect x="70.7198%" y="165" width="0.1220%" height="15" fill="rgb(226,81,46)" fg:x="1739" fg:w="3"/><text x="70.9698%" y="175.50"></text></g><g><title>raytracer`&lt;raytracer::elements::Element as raytracer::elements::Hittable&gt;::pdf_value (5 samples, 0.20%)</title><rect x="71.1671%" y="165" width="0.2033%" height="15" fill="rgb(247,70,30)" fg:x="1750" fg:w="5"/><text x="71.4171%" y="175.50"></text></g><g><title>raytracer`&lt;raytracer::elements::Quad as raytracer::elements::Hittable&gt;::hit (29 samples, 1.18%)</title><rect x="71.3705%" y="165" width="1.1793%" height="15" fill="rgb(212,68,19)" fg:x="1755" fg:w="29"/><text x="71.6205%" y="175.50"></text></g><g><title>raytracer`&lt;raytracer::pdf::PDF as raytracer::pdf::PDFTrait&gt;::value (44 samples, 1.79%)</title><rect x="70.8418%" y="181" width="1.7893%" height="15" fill="rgb(240,187,13)" fg:x="1742" fg:w="44"/><text x="71.0918%" y="191.50">r..</text></g><g><title>raytracer`&lt;raytracer::pdf::PDF as raytracer::pdf::PDFTrait&gt;::value (2 samples, 0.08%)</title><rect x="72.5498%" y="165" width="0.0813%" height="15" fill="rgb(223,113,26)" fg:x="1784" fg:w="2"/><text x="72.7998%" y="175.50"></text></g><g><title>raytracer`DYLD-STUB$$free (1 samples, 0.04%)</title><rect x="72.6312%" y="181" width="0.0407%" height="15" fill="rgb(206,192,2)" fg:x="1786" fg:w="1"/><text x="72.8812%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (2 samples, 0.08%)</title><rect x="72.9565%" y="165" width="0.0813%" height="15" fill="rgb(241,108,4)" fg:x="1794" fg:w="2"/><text x="73.2065%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.16%)</title><rect x="73.0378%" y="165" width="0.1627%" height="15" fill="rgb(247,173,49)" fg:x="1796" fg:w="4"/><text x="73.2878%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.04%)</title><rect x="73.2005%" y="165" width="0.0407%" height="15" fill="rgb(224,114,35)" fg:x="1800" fg:w="1"/><text x="73.4505%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.08%)</title><rect x="73.8105%" y="133" width="0.0813%" height="15" fill="rgb(245,159,27)" fg:x="1815" fg:w="2"/><text x="74.0605%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (19 samples, 0.77%)</title><rect x="73.2412%" y="165" width="0.7727%" height="15" fill="rgb(245,172,44)" fg:x="1801" fg:w="19"/><text x="73.4912%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (12 samples, 0.49%)</title><rect x="73.5258%" y="149" width="0.4880%" height="15" fill="rgb(236,23,11)" fg:x="1808" fg:w="12"/><text x="73.7758%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (3 samples, 0.12%)</title><rect x="73.8918%" y="133" width="0.1220%" height="15" fill="rgb(205,117,38)" fg:x="1817" fg:w="3"/><text x="74.1418%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.08%)</title><rect x="74.0138%" y="149" width="0.0813%" height="15" fill="rgb(237,72,25)" fg:x="1820" fg:w="2"/><text x="74.2638%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.04%)</title><rect x="74.1358%" y="133" width="0.0407%" height="15" fill="rgb(244,70,9)" fg:x="1823" fg:w="1"/><text x="74.3858%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (12 samples, 0.49%)</title><rect x="74.0138%" y="165" width="0.4880%" height="15" fill="rgb(217,125,39)" fg:x="1820" fg:w="12"/><text x="74.2638%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (10 samples, 0.41%)</title><rect x="74.0952%" y="149" width="0.4067%" height="15" fill="rgb(235,36,10)" fg:x="1822" fg:w="10"/><text x="74.3452%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (8 samples, 0.33%)</title><rect x="74.1765%" y="133" width="0.3253%" height="15" fill="rgb(251,123,47)" fg:x="1824" fg:w="8"/><text x="74.4265%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (3 samples, 0.12%)</title><rect x="74.3798%" y="117" width="0.1220%" height="15" fill="rgb(221,13,13)" fg:x="1829" fg:w="3"/><text x="74.6298%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.08%)</title><rect x="74.5018%" y="165" width="0.0813%" height="15" fill="rgb(238,131,9)" fg:x="1832" fg:w="2"/><text x="74.7518%" y="175.50"></text></g><g><title>raytracer`&lt;raytracer::bhv::BHVNode as raytracer::elements::Hittable&gt;::hit (14 samples, 0.57%)</title><rect x="81.9845%" y="85" width="0.5693%" height="15" fill="rgb(211,50,8)" fg:x="2016" fg:w="14"/><text x="82.2345%" y="95.50"></text></g><g><title>raytracer`&lt;raytracer::bhv::BHVNode as raytracer::elements::Hittable&gt;::hit (104 samples, 4.23%)</title><rect x="79.2192%" y="101" width="4.2294%" height="15" fill="rgb(245,182,24)" fg:x="1948" fg:w="104"/><text x="79.4692%" y="111.50">raytr..</text></g><g><title>raytracer`&lt;raytracer::elements::Element as raytracer::elements::Hittable&gt;::hit (22 samples, 0.89%)</title><rect x="82.5539%" y="85" width="0.8947%" height="15" fill="rgb(242,14,37)" fg:x="2030" fg:w="22"/><text x="82.8039%" y="95.50"></text></g><g><title>raytracer`&lt;raytracer::elements::Element as raytracer::elements::Hittable&gt;::hit (89 samples, 3.62%)</title><rect x="83.4486%" y="101" width="3.6194%" height="15" fill="rgb(246,228,12)" fg:x="2052" fg:w="89"/><text x="83.6986%" y="111.50">rayt..</text></g><g><title>raytracer`&lt;raytracer::bhv::BHVNode as raytracer::elements::Hittable&gt;::hit (312 samples, 12.69%)</title><rect x="74.5832%" y="165" width="12.6881%" height="15" fill="rgb(213,55,15)" fg:x="1834" fg:w="312"/><text x="74.8332%" y="175.50">raytracer`&lt;raytrace..</text></g><g><title>raytracer`&lt;raytracer::bhv::BHVNode as raytracer::elements::Hittable&gt;::hit (295 samples, 12.00%)</title><rect x="75.2745%" y="149" width="11.9967%" height="15" fill="rgb(209,9,3)" fg:x="1851" fg:w="295"/><text x="75.5245%" y="159.50">raytracer`&lt;raytrac..</text></g><g><title>raytracer`&lt;raytracer::bhv::BHVNode as raytracer::elements::Hittable&gt;::hit (279 samples, 11.35%)</title><rect x="75.9252%" y="133" width="11.3461%" height="15" fill="rgb(230,59,30)" fg:x="1867" fg:w="279"/><text x="76.1752%" y="143.50">raytracer`&lt;raytra..</text></g><g><title>raytracer`&lt;raytracer::bhv::BHVNode as raytracer::elements::Hittable&gt;::hit (248 samples, 10.09%)</title><rect x="77.1858%" y="117" width="10.0854%" height="15" fill="rgb(209,121,21)" fg:x="1898" fg:w="248"/><text x="77.4358%" y="127.50">raytracer`&lt;rayt..</text></g><g><title>raytracer`&lt;raytracer::elements::Quad as raytracer::elements::Hittable&gt;::hit (5 samples, 0.20%)</title><rect x="87.0679%" y="101" width="0.2033%" height="15" fill="rgb(220,109,13)" fg:x="2141" fg:w="5"/><text x="87.3179%" y="111.50"></text></g><g><title>raytracer`&lt;raytracer::elements::Element as raytracer::elements::Hittable&gt;::pdf_value (1 samples, 0.04%)</title><rect x="87.2712%" y="165" width="0.0407%" height="15" fill="rgb(232,18,1)" fg:x="2146" fg:w="1"/><text x="87.5212%" y="175.50"></text></g><g><title>raytracer`&lt;raytracer::elements::Quad as raytracer::elements::Hittable&gt;::random (1 samples, 0.04%)</title><rect x="87.3119%" y="165" width="0.0407%" height="15" fill="rgb(215,41,42)" fg:x="2147" fg:w="1"/><text x="87.5619%" y="175.50"></text></g><g><title>libsystem_m.dylib`0x000000019325dd7c (1 samples, 0.04%)</title><rect x="87.5153%" y="149" width="0.0407%" height="15" fill="rgb(224,123,36)" fg:x="2152" fg:w="1"/><text x="87.7653%" y="159.50"></text></g><g><title>raytracer`&lt;raytracer::pdf::PDF as raytracer::pdf::PDFTrait&gt;::generate (10 samples, 0.41%)</title><rect x="87.3526%" y="165" width="0.4067%" height="15" fill="rgb(240,125,3)" fg:x="2148" fg:w="10"/><text x="87.6026%" y="175.50"></text></g><g><title>libsystem_m.dylib`__sincos_stret (5 samples, 0.20%)</title><rect x="87.5559%" y="149" width="0.2033%" height="15" fill="rgb(205,98,50)" fg:x="2153" fg:w="5"/><text x="87.8059%" y="159.50"></text></g><g><title>raytracer`&lt;raytracer::pdf::PDF as raytracer::pdf::PDFTrait&gt;::value (10 samples, 0.41%)</title><rect x="87.7593%" y="165" width="0.4067%" height="15" fill="rgb(205,185,37)" fg:x="2158" fg:w="10"/><text x="88.0093%" y="175.50"></text></g><g><title>raytracer`&lt;raytracer::elements::Quad as raytracer::elements::Hittable&gt;::hit (9 samples, 0.37%)</title><rect x="87.7999%" y="149" width="0.3660%" height="15" fill="rgb(238,207,15)" fg:x="2159" fg:w="9"/><text x="88.0499%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.08%)</title><rect x="88.3286%" y="149" width="0.0813%" height="15" fill="rgb(213,199,42)" fg:x="2172" fg:w="2"/><text x="88.5786%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.33%)</title><rect x="88.4099%" y="149" width="0.3253%" height="15" fill="rgb(235,201,11)" fg:x="2174" fg:w="8"/><text x="88.6599%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (4 samples, 0.16%)</title><rect x="88.5726%" y="133" width="0.1627%" height="15" fill="rgb(207,46,11)" fg:x="2178" fg:w="4"/><text x="88.8226%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.04%)</title><rect x="88.6946%" y="117" width="0.0407%" height="15" fill="rgb(241,35,35)" fg:x="2181" fg:w="1"/><text x="88.9446%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.08%)</title><rect x="88.7353%" y="133" width="0.0813%" height="15" fill="rgb(243,32,47)" fg:x="2182" fg:w="2"/><text x="88.9853%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (2 samples, 0.08%)</title><rect x="88.8979%" y="117" width="0.0813%" height="15" fill="rgb(247,202,23)" fg:x="2186" fg:w="2"/><text x="89.1479%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.37%)</title><rect x="88.7353%" y="149" width="0.3660%" height="15" fill="rgb(219,102,11)" fg:x="2182" fg:w="9"/><text x="88.9853%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 0.28%)</title><rect x="88.8166%" y="133" width="0.2847%" height="15" fill="rgb(243,110,44)" fg:x="2184" fg:w="7"/><text x="89.0666%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.12%)</title><rect x="88.9793%" y="117" width="0.1220%" height="15" fill="rgb(222,74,54)" fg:x="2188" fg:w="3"/><text x="89.2293%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.04%)</title><rect x="89.1013%" y="149" width="0.0407%" height="15" fill="rgb(216,99,12)" fg:x="2191" fg:w="1"/><text x="89.3513%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.08%)</title><rect x="89.1419%" y="149" width="0.0813%" height="15" fill="rgb(226,22,26)" fg:x="2192" fg:w="2"/><text x="89.3919%" y="159.50"></text></g><g><title>raytracer`&lt;raytracer::bhv::BHVNode as raytracer::elements::Hittable&gt;::hit (5 samples, 0.20%)</title><rect x="92.2733%" y="69" width="0.2033%" height="15" fill="rgb(217,163,10)" fg:x="2269" fg:w="5"/><text x="92.5233%" y="79.50"></text></g><g><title>raytracer`&lt;raytracer::bhv::BHVNode as raytracer::elements::Hittable&gt;::hit (40 samples, 1.63%)</title><rect x="91.2973%" y="85" width="1.6267%" height="15" fill="rgb(213,25,53)" fg:x="2245" fg:w="40"/><text x="91.5473%" y="95.50"></text></g><g><title>raytracer`&lt;raytracer::elements::Element as raytracer::elements::Hittable&gt;::hit (11 samples, 0.45%)</title><rect x="92.4766%" y="69" width="0.4473%" height="15" fill="rgb(252,105,26)" fg:x="2274" fg:w="11"/><text x="92.7266%" y="79.50"></text></g><g><title>raytracer`&lt;raytracer::bhv::BHVNode as raytracer::elements::Hittable&gt;::hit (134 samples, 5.45%)</title><rect x="89.2233%" y="149" width="5.4494%" height="15" fill="rgb(220,39,43)" fg:x="2194" fg:w="134"/><text x="89.4733%" y="159.50">raytrac..</text></g><g><title>raytracer`&lt;raytracer::bhv::BHVNode as raytracer::elements::Hittable&gt;::hit (123 samples, 5.00%)</title><rect x="89.6706%" y="133" width="5.0020%" height="15" fill="rgb(229,68,48)" fg:x="2205" fg:w="123"/><text x="89.9206%" y="143.50">raytra..</text></g><g><title>raytracer`&lt;raytracer::bhv::BHVNode as raytracer::elements::Hittable&gt;::hit (118 samples, 4.80%)</title><rect x="89.8739%" y="117" width="4.7987%" height="15" fill="rgb(252,8,32)" fg:x="2210" fg:w="118"/><text x="90.1239%" y="127.50">raytra..</text></g><g><title>raytracer`&lt;raytracer::bhv::BHVNode as raytracer::elements::Hittable&gt;::hit (102 samples, 4.15%)</title><rect x="90.5246%" y="101" width="4.1480%" height="15" fill="rgb(223,20,43)" fg:x="2226" fg:w="102"/><text x="90.7746%" y="111.50">raytr..</text></g><g><title>raytracer`&lt;raytracer::elements::Element as raytracer::elements::Hittable&gt;::hit (43 samples, 1.75%)</title><rect x="92.9240%" y="85" width="1.7487%" height="15" fill="rgb(229,81,49)" fg:x="2285" fg:w="43"/><text x="93.1740%" y="95.50"></text></g><g><title>raytracer`&lt;raytracer::elements::Element as raytracer::elements::Hittable&gt;::pdf_value (1 samples, 0.04%)</title><rect x="94.6726%" y="149" width="0.0407%" height="15" fill="rgb(236,28,36)" fg:x="2328" fg:w="1"/><text x="94.9226%" y="159.50"></text></g><g><title>raytracer`&lt;raytracer::elements::Quad as raytracer::elements::Hittable&gt;::random (1 samples, 0.04%)</title><rect x="94.7133%" y="149" width="0.0407%" height="15" fill="rgb(249,185,26)" fg:x="2329" fg:w="1"/><text x="94.9633%" y="159.50"></text></g><g><title>raytracer`&lt;raytracer::pdf::PDF as raytracer::pdf::PDFTrait&gt;::generate (3 samples, 0.12%)</title><rect x="94.7540%" y="149" width="0.1220%" height="15" fill="rgb(249,174,33)" fg:x="2330" fg:w="3"/><text x="95.0040%" y="159.50"></text></g><g><title>libsystem_m.dylib`__sincos_stret (1 samples, 0.04%)</title><rect x="94.8353%" y="133" width="0.0407%" height="15" fill="rgb(233,201,37)" fg:x="2332" fg:w="1"/><text x="95.0853%" y="143.50"></text></g><g><title>raytracer`&lt;raytracer::elements::Quad as raytracer::elements::Hittable&gt;::hit (9 samples, 0.37%)</title><rect x="94.9166%" y="133" width="0.3660%" height="15" fill="rgb(221,78,26)" fg:x="2334" fg:w="9"/><text x="95.1666%" y="143.50"></text></g><g><title>raytracer`&lt;raytracer::pdf::PDF as raytracer::pdf::PDFTrait&gt;::value (11 samples, 0.45%)</title><rect x="94.8760%" y="149" width="0.4473%" height="15" fill="rgb(250,127,30)" fg:x="2333" fg:w="11"/><text x="95.1260%" y="159.50"></text></g><g><title>raytracer`&lt;raytracer::pdf::PDF as raytracer::pdf::PDFTrait&gt;::value (1 samples, 0.04%)</title><rect x="95.2826%" y="133" width="0.0407%" height="15" fill="rgb(230,49,44)" fg:x="2343" fg:w="1"/><text x="95.5326%" y="143.50"></text></g><g><title>raytracer`DYLD-STUB$$memmove (1 samples, 0.04%)</title><rect x="95.3233%" y="149" width="0.0407%" height="15" fill="rgb(229,67,23)" fg:x="2344" fg:w="1"/><text x="95.5733%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.04%)</title><rect x="95.4453%" y="133" width="0.0407%" height="15" fill="rgb(249,83,47)" fg:x="2347" fg:w="1"/><text x="95.6953%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.08%)</title><rect x="95.5673%" y="101" width="0.0813%" height="15" fill="rgb(215,43,3)" fg:x="2350" fg:w="2"/><text x="95.8173%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.24%)</title><rect x="95.4860%" y="133" width="0.2440%" height="15" fill="rgb(238,154,13)" fg:x="2348" fg:w="6"/><text x="95.7360%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (6 samples, 0.24%)</title><rect x="95.4860%" y="117" width="0.2440%" height="15" fill="rgb(219,56,2)" fg:x="2348" fg:w="6"/><text x="95.7360%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2 samples, 0.08%)</title><rect x="95.6486%" y="101" width="0.0813%" height="15" fill="rgb(233,0,4)" fg:x="2352" fg:w="2"/><text x="95.8986%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.04%)</title><rect x="95.7300%" y="101" width="0.0407%" height="15" fill="rgb(235,30,7)" fg:x="2354" fg:w="1"/><text x="95.9800%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.08%)</title><rect x="95.7300%" y="133" width="0.0813%" height="15" fill="rgb(250,79,13)" fg:x="2354" fg:w="2"/><text x="95.9800%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.08%)</title><rect x="95.7300%" y="117" width="0.0813%" height="15" fill="rgb(211,146,34)" fg:x="2354" fg:w="2"/><text x="95.9800%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.04%)</title><rect x="95.7706%" y="101" width="0.0407%" height="15" fill="rgb(228,22,38)" fg:x="2355" fg:w="1"/><text x="96.0206%" y="111.50"></text></g><g><title>raytracer`&lt;raytracer::bhv::BHVNode as raytracer::elements::Hittable&gt;::hit (3 samples, 0.12%)</title><rect x="97.2346%" y="53" width="0.1220%" height="15" fill="rgb(235,168,5)" fg:x="2391" fg:w="3"/><text x="97.4846%" y="63.50"></text></g><g><title>raytracer`&lt;raytracer::bhv::BHVNode as raytracer::elements::Hittable&gt;::hit (18 samples, 0.73%)</title><rect x="96.7060%" y="69" width="0.7320%" height="15" fill="rgb(221,155,16)" fg:x="2378" fg:w="18"/><text x="96.9560%" y="79.50"></text></g><g><title>raytracer`&lt;raytracer::elements::Element as raytracer::elements::Hittable&gt;::hit (2 samples, 0.08%)</title><rect x="97.3566%" y="53" width="0.0813%" height="15" fill="rgb(215,215,53)" fg:x="2394" fg:w="2"/><text x="97.6066%" y="63.50"></text></g><g><title>raytracer`&lt;raytracer::elements::Element as raytracer::elements::Hittable&gt;::hit (18 samples, 0.73%)</title><rect x="97.4380%" y="69" width="0.7320%" height="15" fill="rgb(223,4,10)" fg:x="2396" fg:w="18"/><text x="97.6880%" y="79.50"></text></g><g><title>raytracer`&lt;raytracer::bhv::BHVNode as raytracer::elements::Hittable&gt;::hit (59 samples, 2.40%)</title><rect x="95.8113%" y="133" width="2.3993%" height="15" fill="rgb(234,103,6)" fg:x="2356" fg:w="59"/><text x="96.0613%" y="143.50">ra..</text></g><g><title>raytracer`&lt;raytracer::bhv::BHVNode as raytracer::elements::Hittable&gt;::hit (58 samples, 2.36%)</title><rect x="95.8520%" y="117" width="2.3587%" height="15" fill="rgb(227,97,0)" fg:x="2357" fg:w="58"/><text x="96.1020%" y="127.50">r..</text></g><g><title>raytracer`&lt;raytracer::bhv::BHVNode as raytracer::elements::Hittable&gt;::hit (56 samples, 2.28%)</title><rect x="95.9333%" y="101" width="2.2773%" height="15" fill="rgb(234,150,53)" fg:x="2359" fg:w="56"/><text x="96.1833%" y="111.50">r..</text></g><g><title>raytracer`&lt;raytracer::bhv::BHVNode as raytracer::elements::Hittable&gt;::hit (50 samples, 2.03%)</title><rect x="96.1773%" y="85" width="2.0333%" height="15" fill="rgb(228,201,54)" fg:x="2365" fg:w="50"/><text x="96.4273%" y="95.50">r..</text></g><g><title>raytracer`&lt;raytracer::elements::Quad as raytracer::elements::Hittable&gt;::hit (1 samples, 0.04%)</title><rect x="98.1700%" y="69" width="0.0407%" height="15" fill="rgb(222,22,37)" fg:x="2414" fg:w="1"/><text x="98.4200%" y="79.50"></text></g><g><title>raytracer`&lt;raytracer::pdf::PDF as raytracer::pdf::PDFTrait&gt;::generate (1 samples, 0.04%)</title><rect x="98.2107%" y="133" width="0.0407%" height="15" fill="rgb(237,53,32)" fg:x="2415" fg:w="1"/><text x="98.4607%" y="143.50"></text></g><g><title>libsystem_m.dylib`__sincos_stret (1 samples, 0.04%)</title><rect x="98.2107%" y="117" width="0.0407%" height="15" fill="rgb(233,25,53)" fg:x="2415" fg:w="1"/><text x="98.4607%" y="127.50"></text></g><g><title>libsystem_m.dylib`0x000000019325dc64 (1 samples, 0.04%)</title><rect x="98.2107%" y="101" width="0.0407%" height="15" fill="rgb(210,40,34)" fg:x="2415" fg:w="1"/><text x="98.4607%" y="111.50"></text></g><g><title>raytracer`&lt;raytracer::pdf::PDF as raytracer::pdf::PDFTrait&gt;::value (7 samples, 0.28%)</title><rect x="98.2513%" y="133" width="0.2847%" height="15" fill="rgb(241,220,44)" fg:x="2416" fg:w="7"/><text x="98.5013%" y="143.50"></text></g><g><title>raytracer`&lt;raytracer::elements::Quad as raytracer::elements::Hittable&gt;::hit (6 samples, 0.24%)</title><rect x="98.2920%" y="117" width="0.2440%" height="15" fill="rgb(235,28,35)" fg:x="2417" fg:w="6"/><text x="98.5420%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.04%)</title><rect x="98.5767%" y="85" width="0.0407%" height="15" fill="rgb(210,56,17)" fg:x="2424" fg:w="1"/><text x="98.8267%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.12%)</title><rect x="98.5360%" y="117" width="0.1220%" height="15" fill="rgb(224,130,29)" fg:x="2423" fg:w="3"/><text x="98.7860%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.12%)</title><rect x="98.5360%" y="101" width="0.1220%" height="15" fill="rgb(235,212,8)" fg:x="2423" fg:w="3"/><text x="98.7860%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.04%)</title><rect x="98.6173%" y="85" width="0.0407%" height="15" fill="rgb(223,33,50)" fg:x="2425" fg:w="1"/><text x="98.8673%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.20%)</title><rect x="98.6580%" y="117" width="0.2033%" height="15" fill="rgb(219,149,13)" fg:x="2426" fg:w="5"/><text x="98.9080%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 0.16%)</title><rect x="98.6987%" y="101" width="0.1627%" height="15" fill="rgb(250,156,29)" fg:x="2427" fg:w="4"/><text x="98.9487%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (4 samples, 0.16%)</title><rect x="98.6987%" y="85" width="0.1627%" height="15" fill="rgb(216,193,19)" fg:x="2427" fg:w="4"/><text x="98.9487%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.12%)</title><rect x="98.7393%" y="69" width="0.1220%" height="15" fill="rgb(216,135,14)" fg:x="2428" fg:w="3"/><text x="98.9893%" y="79.50"></text></g><g><title>raytracer`&lt;raytracer::bhv::BHVNode as raytracer::elements::Hittable&gt;::hit (11 samples, 0.45%)</title><rect x="99.1053%" y="53" width="0.4473%" height="15" fill="rgb(241,47,5)" fg:x="2437" fg:w="11"/><text x="99.3553%" y="63.50"></text></g><g><title>raytracer`&lt;raytracer::elements::Element as raytracer::elements::Hittable&gt;::hit (2 samples, 0.08%)</title><rect x="99.4713%" y="37" width="0.0813%" height="15" fill="rgb(233,42,35)" fg:x="2446" fg:w="2"/><text x="99.7213%" y="47.50"></text></g><g><title>raytracer`&lt;raytracer::bhv::BHVNode as raytracer::elements::Hittable&gt;::hit (24 samples, 0.98%)</title><rect x="98.8613%" y="117" width="0.9760%" height="15" fill="rgb(231,13,6)" fg:x="2431" fg:w="24"/><text x="99.1113%" y="127.50"></text></g><g><title>raytracer`&lt;raytracer::bhv::BHVNode as raytracer::elements::Hittable&gt;::hit (23 samples, 0.94%)</title><rect x="98.9020%" y="101" width="0.9353%" height="15" fill="rgb(207,181,40)" fg:x="2432" fg:w="23"/><text x="99.1520%" y="111.50"></text></g><g><title>raytracer`&lt;raytracer::bhv::BHVNode as raytracer::elements::Hittable&gt;::hit (23 samples, 0.94%)</title><rect x="98.9020%" y="85" width="0.9353%" height="15" fill="rgb(254,173,49)" fg:x="2432" fg:w="23"/><text x="99.1520%" y="95.50"></text></g><g><title>raytracer`&lt;raytracer::bhv::BHVNode as raytracer::elements::Hittable&gt;::hit (21 samples, 0.85%)</title><rect x="98.9833%" y="69" width="0.8540%" height="15" fill="rgb(221,1,38)" fg:x="2434" fg:w="21"/><text x="99.2333%" y="79.50"></text></g><g><title>raytracer`&lt;raytracer::elements::Element as raytracer::elements::Hittable&gt;::hit (7 samples, 0.28%)</title><rect x="99.5527%" y="53" width="0.2847%" height="15" fill="rgb(206,124,46)" fg:x="2448" fg:w="7"/><text x="99.8027%" y="63.50"></text></g><g><title>raytracer`&lt;raytracer::pdf::PDF as raytracer::pdf::PDFTrait&gt;::generate (2 samples, 0.08%)</title><rect x="99.8373%" y="117" width="0.0813%" height="15" fill="rgb(249,21,11)" fg:x="2455" fg:w="2"/><text x="100.0873%" y="127.50"></text></g><g><title>all (2,459 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(222,201,40)" fg:x="0" fg:w="2459"/><text x="0.2500%" y="319.50"></text></g><g><title>dyld`start (2,459 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(235,61,29)" fg:x="0" fg:w="2459"/><text x="0.2500%" y="303.50">dyld`start</text></g><g><title>raytracer`main (2,459 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(219,207,3)" fg:x="0" fg:w="2459"/><text x="0.2500%" y="287.50">raytracer`main</text></g><g><title>raytracer`std::sys_common::backtrace::__rust_begin_short_backtrace (2,459 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(222,56,46)" fg:x="0" fg:w="2459"/><text x="0.2500%" y="271.50">raytracer`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>raytracer`raytracer::main (2,459 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(239,76,54)" fg:x="0" fg:w="2459"/><text x="0.2500%" y="255.50">raytracer`raytracer::main</text></g><g><title>raytracer`raytracer::render (2,446 samples, 99.47%)</title><rect x="0.5287%" y="229" width="99.4713%" height="15" fill="rgb(231,124,27)" fg:x="13" fg:w="2446"/><text x="0.7787%" y="239.50">raytracer`raytracer::render</text></g><g><title>raytracer`raytracer::ray_color (2,323 samples, 94.47%)</title><rect x="5.5307%" y="213" width="94.4693%" height="15" fill="rgb(249,195,6)" fg:x="136" fg:w="2323"/><text x="5.7807%" y="223.50">raytracer`raytracer::ray_color</text></g><g><title>raytracer`raytracer::ray_color (1,430 samples, 58.15%)</title><rect x="41.8463%" y="197" width="58.1537%" height="15" fill="rgb(237,174,47)" fg:x="1029" fg:w="1430"/><text x="42.0963%" y="207.50">raytracer`raytracer::ray_color</text></g><g><title>raytracer`raytracer::ray_color (672 samples, 27.33%)</title><rect x="72.6718%" y="181" width="27.3282%" height="15" fill="rgb(206,201,31)" fg:x="1787" fg:w="672"/><text x="72.9218%" y="191.50">raytracer`raytracer::ray_color</text></g><g><title>raytracer`raytracer::ray_color (291 samples, 11.83%)</title><rect x="88.1659%" y="165" width="11.8341%" height="15" fill="rgb(231,57,52)" fg:x="2168" fg:w="291"/><text x="88.4159%" y="175.50">raytracer`raytrace..</text></g><g><title>raytracer`raytracer::ray_color (114 samples, 4.64%)</title><rect x="95.3640%" y="149" width="4.6360%" height="15" fill="rgb(248,177,22)" fg:x="2345" fg:w="114"/><text x="95.6140%" y="159.50">raytr..</text></g><g><title>raytracer`raytracer::ray_color (36 samples, 1.46%)</title><rect x="98.5360%" y="133" width="1.4640%" height="15" fill="rgb(215,211,37)" fg:x="2423" fg:w="36"/><text x="98.7860%" y="143.50"></text></g><g><title>raytracer`&lt;raytracer::pdf::PDF as raytracer::pdf::PDFTrait&gt;::value (2 samples, 0.08%)</title><rect x="99.9187%" y="117" width="0.0813%" height="15" fill="rgb(241,128,51)" fg:x="2457" fg:w="2"/><text x="100.1687%" y="127.50"></text></g><g><title>raytracer`&lt;raytracer::elements::Quad as raytracer::elements::Hittable&gt;::hit (1 samples, 0.04%)</title><rect x="99.9593%" y="101" width="0.0407%" height="15" fill="rgb(227,165,31)" fg:x="2458" fg:w="1"/><text x="100.2093%" y="111.50"></text></g></svg></svg>